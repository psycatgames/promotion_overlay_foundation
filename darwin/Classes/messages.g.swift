// Copyright 2023 PsyCat Games (https://psycatgames.com/). All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol PromotionOverlayApi {
  func show(appIdentifier: String, campaignToken: String?, providerToken: String?, dismissOnBackground: Bool, position: Int64) throws -> Bool
  func dismiss() throws -> Bool
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class PromotionOverlayApiSetup {
  /// The codec used by PromotionOverlayApi.
  /// Sets up an instance of `PromotionOverlayApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: PromotionOverlayApi?) {
    let showChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.promotion_overlay_foundation.PromotionOverlayApi.show", binaryMessenger: binaryMessenger)
    if let api = api {
      showChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let appIdentifierArg = args[0] as! String
        let campaignTokenArg: String? = nilOrValue(args[1])
        let providerTokenArg: String? = nilOrValue(args[2])
        let dismissOnBackgroundArg = args[3] as! Bool
        let positionArg = args[4] is Int64 ? args[4] as! Int64 : Int64(args[4] as! Int32)
        do {
          let result = try api.show(appIdentifier: appIdentifierArg, campaignToken: campaignTokenArg, providerToken: providerTokenArg, dismissOnBackground: dismissOnBackgroundArg, position: positionArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      showChannel.setMessageHandler(nil)
    }
    let dismissChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.promotion_overlay_foundation.PromotionOverlayApi.dismiss", binaryMessenger: binaryMessenger)
    if let api = api {
      dismissChannel.setMessageHandler { _, reply in
        do {
          let result = try api.dismiss()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      dismissChannel.setMessageHandler(nil)
    }
  }
}
